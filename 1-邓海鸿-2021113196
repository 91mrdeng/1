{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 期中练习\n",
    "\n",
    "## 要求\n",
    "\n",
    "检验对上半学期知识的掌握，课后自行完成，可查阅各种资料。\n",
    "\n",
    "### 如何提交\n",
    "\n",
    "- 复制本文件，文件名改为`教学班号-编号.ipynb`。例如刘国强同学是2班第15号，文件名应改为`2-15.ipynb`。\n",
    "- 在复制文件中答题，每道题的答案紧接题目。\n",
    "- 答题结束后commit该文件，并提交pull request。\n",
    "\n"
   ]
  },

import numpy as np
import matplotlib.pyplot as plt
X = np.array([ 0.70846042, -0.68388789,  1.03780474,  1.08334621,  0.77026309,
        0.19722004, -0.46819526, -0.45270204,  0.02362673,  0.06549472,
        0.08898416,  0.59424455, -0.26400365,  0.2456922 ,  0.5114847 ,
       -0.31604016, -1.49329364,  1.24112288,  1.01993764,  1.75634392])
Y = np.array([ 4.49682518,  3.5737603 ,  7.93568197,  3.58719009,  5.38341441,
        5.47930021, -0.9861325 , -0.15686681,  2.36963799,  4.01600211,
       -0.20329642,  3.07728831, -1.30408343,  2.84796441,  2.27915787,
        2.62078689, -1.2855133 ,  4.39242028,  6.24385669,  6.00822241])
plt.plot(X, Y, ".")
[<matplotlib.lines.Line2D at 0x1d4e2a17430>]

1.1 划分训练集和测试集
将20个数据点划分为训练集和测试集，期中训练集为前15个数据点，测试集为后5个。

x_train = X[0:15]
y_train = Y[0:15]
x_test  = X[15:]
y_test  = Y[15:]
def regression(X, Y, n):
    rows = [X**i for i in reversed(range(n))]
    A = np.vstack(rows).T
    theta = np.linalg.solve(A.T@A, A.T@Y)
    return theta
def predict(theta,X):
    n = len(theta)
    degrees = reversed(range(n))

    Y = np.zeros_like(X)
    for w, d in zip(theta, degrees):
        Y += w * X**d
    return Y
1.2 数据建模
分别用1到4次多项式函数作为模型拟合训练集中的数据，并分别计算每个模型与数据的均方差（MSE）。

哪一个模型与训练数据拟合最好？

x_model = np.linspace(-4, 4, 200)

for i in range (2,6):
    coef1 = regression(x_train, y_train, i)
    y_model = predict(coef1, x_model)
    plt.plot(x_model, y_model, label="degree of {}".format(i-1))
plt.ylim(-2, 10)
plt.title("Compare regression of different degrees")
plt.legend()
plt.xlabel("X")
plt.ylabel("Y")
plt.show()

Ss_test = []
Ns_test = []
Ss = []
Ns = []
for n in range(2, 6):#求出1-4次多项式拟合值与实际值的均方差
    theta = regression(x_train, y_train, n)
    Yhat = predict(theta,x_train)
    E = y_train - Yhat
    S = np.dot(E, E) / 15
    Ss.append(S)
    Ns.append(n)
print(Ss)
[3.614119980936591, 3.4709875708912987, 3.010246815533374, 2.3971661654711824]
for n in range(2, 6):#求出训练集所拟合的函数对测试集的拟合效果
    theta = regression(x_train, y_train, n)
    Yhat_test = predict(theta,x_test)
    E = y_test - Yhat_test
    S = np.dot(E, E) / 15
    Ss_test.append(S)
    Ns_test.append(n)
min_Ss_idx = Ss.index(min(Ss))
print("均方差：{}".format(Ss))
print("{}次多项式函数与训练数据拟合最好".format(min_Ss_idx+1))
均方差：[3.614119980936591, 3.4709875708912987, 3.010246815533374, 2.3971661654711824]
4次多项式函数与训练数据拟合最好
1.3 模型测试
计算4个模型与测试数据的均方差，哪一个模型与测试数据拟合最好？

1.2和1.3的答案是否相同？两者的异同有什么意义？

min_Ss_test_idx = Ss_test.index(min(Ss_test))
print("均方差：{}".format(Ss_test))
print("{}次多项式函数与训练数据拟合最好".format(min_Ss_test_idx+1))
print("答案不相同，使用训练集进行测试会出现过拟合现象,在训练集上，随着多项式次数的增高，均方误差逐渐减小，而在测试集上，随着多项式次数的增高，均方误差逐渐增大。当模型在训练集上表现优秀但在测试集上表现较差时，可能存在过拟合的问题，说明模型的拟合能力、泛化能力并不是随着多项式次数的增加而增加。")
均方差：[0.6457762674229708, 2.3082953054205317, 48.51276392897358, 905.8332589335402]
1次多项式函数与训练数据拟合最好
答案不相同，使用训练集进行测试会出现过拟合现象,在训练集上，随着多项式次数的增高，均方误差逐渐减小，而在测试集上，随着多项式次数的增高，均方误差逐渐增大。当模型在训练集上表现优秀但在测试集上表现较差时，可能存在过拟合的问题，说明模型的拟合能力、泛化能力并不是随着多项式次数的增加而增加。
    "## 练习2 人工神经网络\n",
    "\n",
    "有如下神经网络：\n",
    "- 输入$x$是2维向量，输出$y$是1维标量\n",
    "- 包含两个全连接层\n",
    "    - 第一层有5个神经元，激活函数为sigmoid\n",
    "    - 第二层有1个神经元，激活函数为relu\n",
    "- 损失函数为均方差MSE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1 写出公式\n",
    "\n",
    "- 写出relu、sigmoid函数的公式\n",
    "- 写出整个神经网络的公式"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\\begin{equation}\n",
    "ReLU(x)=\\left\\{\n",
    "\t\\begin{aligned}\n",
    "\t0 \\quad x<0\\\\\n",
    "\tx \\quad x\\geq0\\\\\n",
    "\t\\end{aligned}\n",
    "\t\\right\n",
    "\t.\n",
    "\\end{equation}\n",
    "$$\\sigma(x) = \\frac{1}{1 + e^{-x}}$$\n",
    "\n",
    "$$y=\\text{ReLU}(W_2\\sigma(W_1x+b_1)+b_2)$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2 正向传播\n",
    "\n",
    "假设已知4个数据点的输入'X'，参考输出'Y'，参数'W_1'、'B_1'、'W_2'、'B_2'，。\n",
    "\n",
    "- 正向传播计算输出预测值'Y_pred'\n",
    "- 计算损失值'L'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = np.array([[-0.05025071,  1.12345037],\n",
    "       [-1.2771336 , -0.03387919],\n",
    "       [-0.06085093,  0.83960333],\n",
    "       [ 0.26666122, -0.15723225]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "注意，这里输入'x'表示为行向量，即'X'中每行表示一个数据点。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y = np.array([[ 0.34942997],\n",
    "       [ 0.09796396],\n",
    "       [ 1.80617515],\n",
    "       [-0.50698293]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "W1 = np.random.randn(2,5)\n",
    "b1 = np.random.randn(5)\n",
    "W2 = np.random.randn(5,1)\n",
    "b2 = np.random.randn(1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "W1 = np.array([[-0.15772071,  2.4169384 ,  1.18656177,  0.74048303,  0.95473468],\n",
    "       [ 1.75613621,  0.44768404,  0.25003215,  0.52863169, -0.75204543]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "b1 = np.array([-1.00393578, -0.19942106, -1.23939537,  1.62336519, -0.21580562])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "W2 = np.array([[ 0.8173788 ],\n",
    "       [-0.01165333],\n",
    "       [ 1.10703394],\n",
    "       [ 0.90372372],\n",
    "       [ 0.86510315]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "b2 = np.array([[0.277288]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = torch.tensor(X, dtype=torch.float)\n",
    "Y = torch.tensor(Y, dtype=torch.float)\n",
    "W1 = torch.tensor(W1, dtype=torch.float, requires_grad=True)\n",
    "W2 = torch.tensor(W2, dtype=torch.float, requires_grad=True)\n",
    "b1 = torch.tensor(b1, dtype=torch.float, requires_grad=True)\n",
    "b2 = torch.tensor(b2, dtype=torch.float, requires_grad=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def forward(X,W1, W2, b1, b2):\n",
    "    f1 = torch.mm(X, W1) + b1\n",
    "    f11 = torch.sigmoid(f1)\n",
    "    f2 = torch.mm(f11, W2) + b2\n",
    "    f22 = torch.relu(f2)\n",
    "    return f22"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Y_pred的值:tensor([[2.1851],\n",
      "        [1.3508],\n",
      "        [2.0997],\n",
      "        [1.9834]], grad_fn=<ReluBackward0>)\n",
      "L:2.806889057159424\n"
     ]
    }
   ],
   "source": [
    "Y_pred = forward(X,W1, W2, b1, b2)\n",
    "print(\"Y_pred的值:{}\".format(Y_pred))\n",
    "\n",
    "loss_fn = torch.nn.MSELoss(reduction='sum')\n",
    "loss = loss_fn(Y_pred, Y)\n",
    "print(\"L:{}\".format(loss/4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3 方向传播\n",
    "\n",
    "计算损失值'L'对参数'W_1'、'B_1'、'W_2'、'B_2'的偏导数。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "loss.backward()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W_1:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "tensor([[-0.4025, -0.0018,  0.0491, -0.5155, -0.1874],\n",
       "        [ 0.6442, -0.0111,  0.8137,  0.2788,  0.5732]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"W_1:\")\n",
    "W1.grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "B_1:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "tensor([ 1.8136, -0.0273,  2.1717,  1.4389,  2.1092])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"B_1:\")\n",
    "b1.grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W_2:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "tensor([[4.8222],\n",
       "        [5.3407],\n",
       "        [2.6462],\n",
       "        [9.7043],\n",
       "        [4.2573]])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"W_2:\")\n",
    "W2.grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "B_2:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "tensor([[11.7448]])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"B_2:\")\n",
    "b2.grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
